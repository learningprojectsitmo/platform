<?xml version="1.0"?>
<odoo>

    <record id="status_sync_server_action" model="ir.actions.server">
        <field name="name">Project stage_id sync with status</field>
        <field name="model_id" ref="model_project_project"/>
        <field name="state">code</field>
        <field name="code">
# Available variables:
#  - env: Odoo Environment on which the action is triggered
#  - model: Odoo Model of the record on which the action is triggered; is a void recordset
#  - record: record on which the action is triggered; may be void
#  - records: recordset of all records on which the action is triggered in multi-mode; may be void
#  - time, datetime, dateutil, timezone: useful Python libraries
#  - float_compare: Odoo function to compare floats based on specific precisions
#  - log: log(message, level='info'): logging function to record debug information in ir.logging table
#  - UserError: Warning Exception to use with raise
#  - Command: x2Many commands namespace
# To return an action, assign: action = {...}

project_id = record.id
stage_id = record.stage_id.id

params = env['ir.config_parameter'].sudo()

status_with_stage_id = {
    int(params.get_param('project_stage_1_id')): "Unconfirmed",
    int(params.get_param('project_stage_2_id')): "OnApproval",
    int(params.get_param('project_stage_3_id')): "TeamFormation",
    int(params.get_param('project_stage_4_id')): "CreationTex",
    int(params.get_param('project_stage_5_id')): "OnApprovalTex",
    int(params.get_param('project_stage_6_id')): "Teamwork",
    int(params.get_param('project_stage_7_id')): "Ready to defend",
    int(params.get_param('project_stage_8_id')): "Past",
}

lp_project = env['lp.project'].search([('project', '=', project_id)])
if lp_project:
  if status_with_stage_id.get(stage_id) == "OnApproval":
    partner = env['res.users'].browse(env.uid).partner_id
    lp_project.write({'status':status_with_stage_id.get(stage_id),
                      'confirmed_id': partner.id})
  else:
    if status_with_stage_id.get(stage_id) == "Teamwork":
            partner = env['res.users'].browse(env.uid).partner_id
            lp_project.write({'status':status_with_stage_id.get(stage_id)})
            lp_project.technical_specification.sudo().write(
            {
                'status': 'Approval',
                'confirmed_id': partner.id
            })
    else:
        lp_project.write({'status':status_with_stage_id.get(stage_id)})

        </field>
    </record>


    <record id="status_sync_automated_action" model="base.automation">
        <field name="name">Project stage_id sync with status</field>
        <field name="model_id" ref="model_project_project"/>
        <field name="trigger">on_create_or_write</field>
        <field name="active">True</field>
        <field name="action_server_ids" eval="[(6, 0, [ref('status_sync_server_action')])]"/>
        <field name="trigger_field_ids" eval="[ (4, ref('project.field_project_project__stage_id')), ]"/>
    </record>
</odoo>
